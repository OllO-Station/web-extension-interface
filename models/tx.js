import { Fee, Msg, } from '@terra-money/feather.js';
export var WebExtensionTxStatus;
(function (WebExtensionTxStatus) {
    WebExtensionTxStatus["PROGRESS"] = "PROGRESS";
    WebExtensionTxStatus["SUCCEED"] = "SUCCEED";
    WebExtensionTxStatus["FAIL"] = "FAIL";
    WebExtensionTxStatus["DENIED"] = "DENIED";
})(WebExtensionTxStatus || (WebExtensionTxStatus = {}));
export function serializeTx(tx) {
    var _a, _b, _c;
    return {
        msgs: tx.msgs.map((msg) => msg.toJSON(tx.isClassic)),
        fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(tx.isClassic),
        memo: tx.memo,
        gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
        gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
        feeDenoms: tx.feeDenoms,
        chainID: tx.chainID,
    };
}
export function deserializeTx(tx) {
    const msgs = tx.msgs.map((msg) => JSON.parse(msg));
    const isProto = '@type' in msgs[0];
    return {
        ...tx,
        msgs: msgs.map((msg) => (isProto ? Msg.fromData(msg, tx.isClassic) : Msg.fromAmino(msg, tx.isClassic))),
        fee: tx.fee
            ? isProto
                ? Fee.fromData(JSON.parse(tx.fee))
                : Fee.fromAmino(JSON.parse(tx.fee))
            : undefined,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dlYi1leHRlbnNpb24taW50ZXJmYWNlL21vZGVscy90eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsR0FBRyxFQUNILEdBQUcsR0FHSixNQUFNLHlCQUF5QixDQUFDO0FBT2pDLE1BQU0sQ0FBTixJQUFZLG9CQUtYO0FBTEQsV0FBWSxvQkFBb0I7SUFDOUIsNkNBQXFCLENBQUE7SUFDckIsMkNBQW1CLENBQUE7SUFDbkIscUNBQWEsQ0FBQTtJQUNiLHlDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFMVyxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBSy9CO0FBeUVELE1BQU0sVUFBVSxXQUFXLENBQUMsRUFBb0I7O0lBQzlDLE9BQU87UUFDTCxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELEdBQUcsRUFBRSxNQUFBLEVBQUUsQ0FBQyxHQUFHLDBDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNiLFNBQVMsRUFBRSxNQUFBLEVBQUUsQ0FBQyxTQUFTLDBDQUFFLFFBQVEsRUFBRTtRQUNuQyxhQUFhLEVBQUUsTUFBQSxFQUFFLENBQUMsYUFBYSwwQ0FBRSxRQUFRLEVBQUU7UUFDM0MsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTO1FBQ3ZCLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTztLQUNwQixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBNkI7SUFDekQsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5DLE9BQU87UUFDTCxHQUFHLEVBQUU7UUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdkcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHO1lBQ1QsQ0FBQyxDQUFDLE9BQU87Z0JBQ1AsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxTQUFTO0tBQ2QsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFeHRlbnNpb25PcHRpb25zLFxuICBGZWUsXG4gIE1zZyxcbiAgUHVibGljS2V5LFxuICBUeCxcbn0gZnJvbSAnQHRlcnJhLW1vbmV5L2ZlYXRoZXIuanMnO1xuaW1wb3J0IHtcbiAgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWQsXG4gIFdlYkV4dGVuc2lvblR4RmFpbGVkLFxuICBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3IsXG59IGZyb20gJy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBlbnVtIFdlYkV4dGVuc2lvblR4U3RhdHVzIHtcbiAgUFJPR1JFU1MgPSAnUFJPR1JFU1MnLFxuICBTVUNDRUVEID0gJ1NVQ0NFRUQnLFxuICBGQUlMID0gJ0ZBSUwnLFxuICBERU5JRUQgPSAnREVOSUVEJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeFByb2dyZXNzIHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5QUk9HUkVTUztcbiAgcGF5bG9hZD86IHVua25vd247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uUG9zdFBheWxvYWQge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgcmF3X2xvZzogc3RyaW5nO1xuICB0eGhhc2g6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgV2ViRXh0ZW5zaW9uU2lnblBheWxvYWQgPSBUeC5EYXRhO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblNpZ25CeXRlc1BheWxvYWQge1xuICByZWNpZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBiYXNlNjQgVWludDhBcnJheVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogLy8gc3RyaW5naWZpZWQgYnlcbiAgICogQnVmZmVyLmZyb20oVWludDhBcnJheSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAqXG4gICAqIC8vIHRvIFVpbnQ4QXJyYXlcbiAgICogVWludDhBcnJheS5mcm9tKEJ1ZmZlci5mcm9tKGJhc2U2NFN0cmluZywgJ2Jhc2U2NCcpKVxuICAgKiBgYGBcbiAgICovXG4gIHNpZ25hdHVyZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogUHVibGljS2V5LmZyb21EYXRhKHB1YmxpY19rZXkpXG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljX2tleT86IFB1YmxpY0tleS5EYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4U3VjY2VlZDxQYXlsb2FkPiB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuU1VDQ0VFRDtcbiAgcGF5bG9hZDogUGF5bG9hZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeEZhaWwge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLkZBSUw7XG4gIGVycm9yOlxuICAgIHwgV2ViRXh0ZW5zaW9uQ3JlYXRlVHhGYWlsZWRcbiAgICB8IFdlYkV4dGVuc2lvblR4RmFpbGVkXG4gICAgfCBXZWJFeHRlbnNpb25UeFVuc3BlY2lmaWVkRXJyb3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhEZW5pZWQge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLkRFTklFRDtcbn1cblxuZXhwb3J0IHR5cGUgV2ViRXh0ZW5zaW9uVHhSZXN1bHQ8UGF5bG9hZD4gPVxuICB8IFdlYkV4dGVuc2lvblR4UHJvZ3Jlc3NcbiAgfCBXZWJFeHRlbnNpb25UeFN1Y2NlZWQ8UGF5bG9hZD5cbiAgfCBXZWJFeHRlbnNpb25UeEZhaWxcbiAgfCBXZWJFeHRlbnNpb25UeERlbmllZDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBmdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zXG4gIGV4dGVuZHMgT21pdDxFeHRlbnNpb25PcHRpb25zLCAnbXNncycgfCAnZmVlJz4ge1xuICBtc2dzOiBzdHJpbmdbXTtcbiAgZmVlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVUeCh0eDogRXh0ZW5zaW9uT3B0aW9ucyk6IFNlcmlhbGl6ZWRDcmVhdGVUeE9wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIG1zZ3M6IHR4Lm1zZ3MubWFwKChtc2cpID0+IG1zZy50b0pTT04odHguaXNDbGFzc2ljKSksXG4gICAgZmVlOiB0eC5mZWU/LnRvSlNPTih0eC5pc0NsYXNzaWMpLFxuICAgIG1lbW86IHR4Lm1lbW8sXG4gICAgZ2FzUHJpY2VzOiB0eC5nYXNQcmljZXM/LnRvU3RyaW5nKCksXG4gICAgZ2FzQWRqdXN0bWVudDogdHguZ2FzQWRqdXN0bWVudD8udG9TdHJpbmcoKSxcbiAgICBmZWVEZW5vbXM6IHR4LmZlZURlbm9tcyxcbiAgICBjaGFpbklEOiB0eC5jaGFpbklELFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVUeCh0eDogU2VyaWFsaXplZENyZWF0ZVR4T3B0aW9ucyk6IEV4dGVuc2lvbk9wdGlvbnMge1xuICBjb25zdCBtc2dzID0gdHgubXNncy5tYXAoKG1zZykgPT4gSlNPTi5wYXJzZShtc2cpKTtcbiAgY29uc3QgaXNQcm90byA9ICdAdHlwZScgaW4gbXNnc1swXTtcblxuICByZXR1cm4ge1xuICAgIC4uLnR4LFxuICAgIG1zZ3M6IG1zZ3MubWFwKChtc2cpID0+IChpc1Byb3RvID8gTXNnLmZyb21EYXRhKG1zZywgdHguaXNDbGFzc2ljKSA6IE1zZy5mcm9tQW1pbm8obXNnLCB0eC5pc0NsYXNzaWMpKSksXG4gICAgZmVlOiB0eC5mZWVcbiAgICAgID8gaXNQcm90b1xuICAgICAgICA/IEZlZS5mcm9tRGF0YShKU09OLnBhcnNlKHR4LmZlZSkpXG4gICAgICAgIDogRmVlLmZyb21BbWlubyhKU09OLnBhcnNlKHR4LmZlZSkpXG4gICAgICA6IHVuZGVmaW5lZCxcbiAgfTtcbn1cbiJdfQ==