"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeTx = exports.serializeTx = exports.WebExtensionTxStatus = void 0;
const feather_js_1 = require("@terra-money/feather.js");
var WebExtensionTxStatus;
(function (WebExtensionTxStatus) {
    WebExtensionTxStatus["PROGRESS"] = "PROGRESS";
    WebExtensionTxStatus["SUCCEED"] = "SUCCEED";
    WebExtensionTxStatus["FAIL"] = "FAIL";
    WebExtensionTxStatus["DENIED"] = "DENIED";
})(WebExtensionTxStatus = exports.WebExtensionTxStatus || (exports.WebExtensionTxStatus = {}));
function serializeTx(tx) {
    var _a, _b, _c;
    return {
        msgs: tx.msgs.map((msg) => msg.toJSON(tx.isClassic)),
        fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(tx.isClassic),
        memo: tx.memo,
        gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
        gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
        feeDenoms: tx.feeDenoms,
        chainID: tx.chainID,
    };
}
exports.serializeTx = serializeTx;
function deserializeTx(tx) {
    const msgs = tx.msgs.map((msg) => JSON.parse(msg));
    const isProto = '@type' in msgs[0];
    return {
        ...tx,
        msgs: msgs.map((msg) => (isProto ? feather_js_1.Msg.fromData(msg, tx.isClassic) : feather_js_1.Msg.fromAmino(msg, tx.isClassic))),
        fee: tx.fee
            ? isProto
                ? feather_js_1.Fee.fromData(JSON.parse(tx.fee))
                : feather_js_1.Fee.fromAmino(JSON.parse(tx.fee))
            : undefined,
    };
}
exports.deserializeTx = deserializeTx;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dlYi1leHRlbnNpb24taW50ZXJmYWNlL21vZGVscy90eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFNaUM7QUFPakMsSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0lBQzlCLDZDQUFxQixDQUFBO0lBQ3JCLDJDQUFtQixDQUFBO0lBQ25CLHFDQUFhLENBQUE7SUFDYix5Q0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTFcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFLL0I7QUF5RUQsU0FBZ0IsV0FBVyxDQUFDLEVBQW9COztJQUM5QyxPQUFPO1FBQ0wsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxHQUFHLEVBQUUsTUFBQSxFQUFFLENBQUMsR0FBRywwQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDYixTQUFTLEVBQUUsTUFBQSxFQUFFLENBQUMsU0FBUywwQ0FBRSxRQUFRLEVBQUU7UUFDbkMsYUFBYSxFQUFFLE1BQUEsRUFBRSxDQUFDLGFBQWEsMENBQUUsUUFBUSxFQUFFO1FBQzNDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUztRQUN2QixPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU87S0FDcEIsQ0FBQztBQUNKLENBQUM7QUFWRCxrQ0FVQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxFQUE2QjtJQUN6RCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkMsT0FBTztRQUNMLEdBQUcsRUFBRTtRQUNMLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZ0JBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3ZHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztZQUNULENBQUMsQ0FBQyxPQUFPO2dCQUNQLENBQUMsQ0FBQyxnQkFBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLGdCQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxTQUFTO0tBQ2QsQ0FBQztBQUNKLENBQUM7QUFiRCxzQ0FhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEV4dGVuc2lvbk9wdGlvbnMsXG4gIEZlZSxcbiAgTXNnLFxuICBQdWJsaWNLZXksXG4gIFR4LFxufSBmcm9tICdAdGVycmEtbW9uZXkvZmVhdGhlci5qcyc7XG5pbXBvcnQge1xuICBXZWJFeHRlbnNpb25DcmVhdGVUeEZhaWxlZCxcbiAgV2ViRXh0ZW5zaW9uVHhGYWlsZWQsXG4gIFdlYkV4dGVuc2lvblR4VW5zcGVjaWZpZWRFcnJvcixcbn0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGVudW0gV2ViRXh0ZW5zaW9uVHhTdGF0dXMge1xuICBQUk9HUkVTUyA9ICdQUk9HUkVTUycsXG4gIFNVQ0NFRUQgPSAnU1VDQ0VFRCcsXG4gIEZBSUwgPSAnRkFJTCcsXG4gIERFTklFRCA9ICdERU5JRUQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4UHJvZ3Jlc3Mge1xuICBzdGF0dXM6IFdlYkV4dGVuc2lvblR4U3RhdHVzLlBST0dSRVNTO1xuICBwYXlsb2FkPzogdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25Qb3N0UGF5bG9hZCB7XG4gIGhlaWdodDogbnVtYmVyO1xuICByYXdfbG9nOiBzdHJpbmc7XG4gIHR4aGFzaDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBXZWJFeHRlbnNpb25TaWduUGF5bG9hZCA9IFR4LkRhdGE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uU2lnbkJ5dGVzUGF5bG9hZCB7XG4gIHJlY2lkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIGJhc2U2NCBVaW50OEFycmF5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiAvLyBzdHJpbmdpZmllZCBieVxuICAgKiBCdWZmZXIuZnJvbShVaW50OEFycmF5KS50b1N0cmluZygnYmFzZTY0JylcbiAgICpcbiAgICogLy8gdG8gVWludDhBcnJheVxuICAgKiBVaW50OEFycmF5LmZyb20oQnVmZmVyLmZyb20oYmFzZTY0U3RyaW5nLCAnYmFzZTY0JykpXG4gICAqIGBgYFxuICAgKi9cbiAgc2lnbmF0dXJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBQdWJsaWNLZXkuZnJvbURhdGEocHVibGljX2tleSlcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWNfa2V5PzogUHVibGljS2V5LkRhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViRXh0ZW5zaW9uVHhTdWNjZWVkPFBheWxvYWQ+IHtcbiAgc3RhdHVzOiBXZWJFeHRlbnNpb25UeFN0YXR1cy5TVUNDRUVEO1xuICBwYXlsb2FkOiBQYXlsb2FkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkV4dGVuc2lvblR4RmFpbCB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuRkFJTDtcbiAgZXJyb3I6XG4gICAgfCBXZWJFeHRlbnNpb25DcmVhdGVUeEZhaWxlZFxuICAgIHwgV2ViRXh0ZW5zaW9uVHhGYWlsZWRcbiAgICB8IFdlYkV4dGVuc2lvblR4VW5zcGVjaWZpZWRFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJFeHRlbnNpb25UeERlbmllZCB7XG4gIHN0YXR1czogV2ViRXh0ZW5zaW9uVHhTdGF0dXMuREVOSUVEO1xufVxuXG5leHBvcnQgdHlwZSBXZWJFeHRlbnNpb25UeFJlc3VsdDxQYXlsb2FkPiA9XG4gIHwgV2ViRXh0ZW5zaW9uVHhQcm9ncmVzc1xuICB8IFdlYkV4dGVuc2lvblR4U3VjY2VlZDxQYXlsb2FkPlxuICB8IFdlYkV4dGVuc2lvblR4RmFpbFxuICB8IFdlYkV4dGVuc2lvblR4RGVuaWVkO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWRDcmVhdGVUeE9wdGlvbnNcbiAgZXh0ZW5kcyBPbWl0PEV4dGVuc2lvbk9wdGlvbnMsICdtc2dzJyB8ICdmZWUnPiB7XG4gIG1zZ3M6IHN0cmluZ1tdO1xuICBmZWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVR4KHR4OiBFeHRlbnNpb25PcHRpb25zKTogU2VyaWFsaXplZENyZWF0ZVR4T3B0aW9ucyB7XG4gIHJldHVybiB7XG4gICAgbXNnczogdHgubXNncy5tYXAoKG1zZykgPT4gbXNnLnRvSlNPTih0eC5pc0NsYXNzaWMpKSxcbiAgICBmZWU6IHR4LmZlZT8udG9KU09OKHR4LmlzQ2xhc3NpYyksXG4gICAgbWVtbzogdHgubWVtbyxcbiAgICBnYXNQcmljZXM6IHR4Lmdhc1ByaWNlcz8udG9TdHJpbmcoKSxcbiAgICBnYXNBZGp1c3RtZW50OiB0eC5nYXNBZGp1c3RtZW50Py50b1N0cmluZygpLFxuICAgIGZlZURlbm9tczogdHguZmVlRGVub21zLFxuICAgIGNoYWluSUQ6IHR4LmNoYWluSUQsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVR4KHR4OiBTZXJpYWxpemVkQ3JlYXRlVHhPcHRpb25zKTogRXh0ZW5zaW9uT3B0aW9ucyB7XG4gIGNvbnN0IG1zZ3MgPSB0eC5tc2dzLm1hcCgobXNnKSA9PiBKU09OLnBhcnNlKG1zZykpO1xuICBjb25zdCBpc1Byb3RvID0gJ0B0eXBlJyBpbiBtc2dzWzBdO1xuXG4gIHJldHVybiB7XG4gICAgLi4udHgsXG4gICAgbXNnczogbXNncy5tYXAoKG1zZykgPT4gKGlzUHJvdG8gPyBNc2cuZnJvbURhdGEobXNnLCB0eC5pc0NsYXNzaWMpIDogTXNnLmZyb21BbWlubyhtc2csIHR4LmlzQ2xhc3NpYykpKSxcbiAgICBmZWU6IHR4LmZlZVxuICAgICAgPyBpc1Byb3RvXG4gICAgICAgID8gRmVlLmZyb21EYXRhKEpTT04ucGFyc2UodHguZmVlKSlcbiAgICAgICAgOiBGZWUuZnJvbUFtaW5vKEpTT04ucGFyc2UodHguZmVlKSlcbiAgICAgIDogdW5kZWZpbmVkLFxuICB9O1xufVxuIl19